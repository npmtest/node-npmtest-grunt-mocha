{"/home/travis/build/npmtest/node-npmtest-grunt-mocha/test.js":"/* istanbul instrument in package npmtest_grunt_mocha */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-mocha/lib.npmtest_grunt_mocha.js":"/* istanbul instrument in package npmtest_grunt_mocha */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_mocha = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_mocha = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-mocha/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-mocha && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_mocha */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_mocha\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_mocha.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_mocha.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_mocha.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_mocha.__dirname + '/lib.npmtest_grunt_mocha.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-mocha/node_modules/grunt-mocha/Gruntfile.js":"/**\n * Example Gruntfile for Mocha setup\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n\n  var port = 8981;\n\n  grunt.initConfig({\n    jshint: {\n      all: [\n        'Gruntfile.js',\n        'tasks/**/*.js', ],\n      options: {\n        jshintrc: '.jshintrc'\n      }\n    },\n    watch: {\n      // If you want to watch files and run tests automatically on change\n      test: {\n        files: [\n          'example/js/**/*.js',\n          'example/test/spec/**/*.js',\n          'phantomjs/*',\n          'tasks/*',\n          'Gruntfile.js'\n        ],\n        tasks: 'test'\n      }\n    },\n    mocha: {\n      // runs all html files (except test2.html) in the test dir\n      // In this example, there's only one, but you can add as many as\n      // you want. You can split them up into different groups here\n      // ex: admin: [ 'test/admin.html' ]\n      all: ['example/test/**/!(test2|testBail|testPage).html'],\n\n      // Runs 'test/test2.html' with specified mocha options.\n      // This variant auto-includes 'bridge.js' so you do not have\n      // to include it in your HTML spec file. Instead, you must add an\n      // environment check before you run `mocha.run` in your HTML.\n      test2: {\n\n        // Test files\n        src: ['example/test/test2.html'],\n        options: {\n          // mocha options\n          mocha: {\n            ignoreLeaks: false,\n            grep: 'food'\n          },\n\n          reporter: 'Spec',\n          timeout: 10000\n        }\n      },\n\n      // Runs the same as test2 but with URL's\n      testUrls: {\n        options: {\n          // mocha options\n          mocha: {\n            ignoreLeaks: false,\n            grep: 'food'\n          },\n\n          reporter: 'Nyan',\n\n          // URLs passed through as options\n          urls: ['http://localhost:' + port + '/example/test/test2.html'],\n        }\n      },\n\n      // Test using a custom reporter\n      testReporter: {\n        src: ['example/test/test.html', 'example/test/test2.html'],\n        options: {\n          mocha: {\n            ignoreLeaks: false,\n            grep: 'food'\n          },\n          reporter: './example/test/reporter/simple',\n        }\n      },\n\n      // Test log option\n      testLog: {\n        src: ['example/test/test.html'],\n        options: {\n          mocha: {\n            ignoreLeaks: false,\n            grep: 'food'\n          },\n          log: true\n        }\n      },\n\n      testDest1: {\n        // Test files\n        src: ['example/test/test2.html'],\n        dest: 'example/test/results/spec.out',\n        options: {\n          reporter: 'Spec',\n        }\n      },\n\n      // Same as above, but with URLS + Xunit\n      testDest2: {\n        options: {\n          reporter: 'XUnit',\n\n          // URLs passed through as options\n          urls: ['http://localhost:' + (port + 1) + '/example/test/test2.html'],\n        },\n        dest: 'example/test/results/xunit.out'\n      },\n\n      // Test a failing test with bail: true\n      testBail: {\n        src: ['example/test/testBail.html'],\n        // Bail option\n        options: {\n          bail: true\n        }\n      },\n\n      // This test should never run\n      neverTest: {\n        src: ['example/test/test.html'],\n      },\n\n      // Test page options\n      testPage: {\n        src: ['example/test/testPage.html'],\n        options: {\n          page: {\n            settings: {\n              userAgent: 'grunt-mocha-agent'\n            }\n          }\n        }\n      }\n    },\n\n    connect: {\n      testUrls: {\n        options: {\n          port: port,\n          base: '.'\n        }\n      },\n      testDest: {\n        options: {\n          port: port + 1,\n          base: '.'\n        }\n      }\n    }\n  });\n\n  grunt.registerTask('verifyDestResults', function () {\n    var expected = ['spec', 'xunit'];\n\n    expected.forEach(function (reporter) {\n      var output = 'example/test/results/' + reporter + '.out';\n\n      // simply check if the file is non-empty since verifying if the output is\n      // correct based on the spec is kind of hard due to changing test running\n      // times and different ways to report this time in reporters.\n      if (!grunt.file.read(output, 'utf8'))\n        grunt.fatal('Empty reporter output: ' + reporter);\n\n      // Clean-up\n      grunt.file.delete(output);\n      grunt.log.ok('Reporter output non-empty for %s', reporter);\n    });\n  });\n\n  grunt.loadTasks('tasks');\n\n  // These plugins provide necessary tasks.\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-connect');\n\n\n  grunt.task.registerTask('testUrls', ['connect:testUrls', 'mocha:testUrls']);\n  grunt.task.registerTask('testLog', ['mocha:testLog']);\n  grunt.task.registerTask('testReporter', ['mocha:testReporter']);\n  grunt.task.registerTask('testDest', [\n    'mocha:testDest1',\n    'connect:testDest',\n    'mocha:testDest2',\n    'verifyDestResults'\n  ]);\n  grunt.task.registerTask('testPage', ['mocha:testPage']);\n  // WARNING: Running this test will cause grunt to fail after mocha:testBail\n  grunt.task.registerTask('testBail', ['mocha:testBail', 'mocha:neverTest']);\n  grunt.task.registerTask('test', [\n    'mocha:all',\n    'testUrls',\n    'testLog',\n    'testReporter',\n    'testDest',\n    'testPage',\n  ]);\n\n  // By default, lint and run all tests.\n  grunt.task.registerTask('default', ['jshint', 'test']);\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-mocha/node_modules/grunt-mocha/phantomjs/bridge.js":"/*\n * Is injected into the spec runner file\n\n * Copyright (c) 2012 Kelly Miyashiro\n * Copyright (c) 2012 \"Cowboy\" Ben Alman\n * Licensed under the MIT license.\n * http://benalman.com/about/license/\n */\n\n/*global mocha:true, alert:true, window:true */\n\n(function() {\n  var MOCHA_EVENTS = [\n    'start',\n    'test',\n    'test end',\n    'suite',\n    'suite end',\n    'fail',\n    'pass',\n    'pending',\n    'end'\n  ];\n\n  // Send messages to the parent phantom.js process via callPhantom\n  // http://phantomjs.org/api/webpage/handler/on-callback.html\n  function sendMessage(cmd, data) {\n    window.callPhantom({\n      cmd: cmd,\n      data: data\n    });\n  }\n\n  // Create a listener who'll bubble events from PhantomJS to Grunt\n  function createGruntListener(ev, runner) {\n    runner.on(ev, function(test, err) {\n      var data = {\n        err: err\n      };\n\n      if (test) {\n        data.title = test.title;\n        data.fullTitle = test.fullTitle();\n        data.state = test.state;\n        data.duration = test.duration;\n        data.slow = test.slow;\n        data.pending = test.isPending();\n      }\n\n      sendMessage('mocha.' + ev, data);\n    });\n  }\n\n  // 1.4.2 moved reporters to Mocha instead of mocha\n  var mochaInstance = window.Mocha || window.mocha;\n\n  var GruntReporter = function(runner){\n    if (!mochaInstance) {\n      throw new Error('Mocha was not found, make sure you include Mocha in your HTML spec file.');\n    }\n\n    // Setup HTML reporter to output data on the screen\n    mochaInstance.reporters.HTML.call(this, runner);\n\n    // Create a Grunt listener for each Mocha events\n    for (var i = 0; i < MOCHA_EVENTS.length; i++) {\n      createGruntListener(MOCHA_EVENTS[i], runner);\n    }\n\n  };\n\n  var Klass = function () {};\n  Klass.prototype = mochaInstance.reporters.HTML.prototype;\n  GruntReporter.prototype = new Klass();\n\n  var options = window.PHANTOMJS;\n\n  // Default mocha options\n  var config = {\n    ui: 'bdd',\n    ignoreLeaks: true,\n    reporter: GruntReporter\n  };\n\n  // If options is a string, assume it is to set the UI (bdd/tdd etc)\n  if (typeof options === 'string') {\n    config.ui = options;\n  }\n\n  // Extend defaults with passed options\n  if (typeof options === 'object' && options !== null) {\n    for (var key in options.mocha) {\n      config[key] = options.mocha[key];\n    }\n  }\n\n  mocha.setup(config);\n\n  // task option `run`, automatically runs mocha for grunt only\n  if (options && options.run) {\n    mocha.run();\n  }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-mocha/node_modules/grunt-mocha/phantomjs/main.js":"/*\n * grunt-lib-phantomjs\n * http://gruntjs.com/\n *\n * Modified for mocha-grunt by Kelly Miyashiro\n *\n * Copyright (c) 2012 \"Cowboy\" Ben Alman, contributors\n * Licensed under the MIT license.\n */\n\n/*global window: true, phantom:true*/\n\n'use strict';\n\nvar fs = require('fs');\nvar _ = require('lodash');\nvar system = require('system');\n\n// The temporary file used for communications.\nvar tmpfile = system.args[1];\n// The page .html file to load.\nvar url = system.args[2];\n// Extra, optionally overridable stuff.\nvar options = JSON.parse(system.args[3] || {});\n\n// Keep track of the last time a client message was sent.\nvar last = new Date();\n\n// Messages are sent to the parent by appending them to the tempfile.\nvar sendMessage = function(arg) {\n  var args = Array.isArray(arg) ? arg : [].slice.call(arguments);\n  last = new Date();\n  fs.write(tmpfile, JSON.stringify(args) + '\\n', 'a');\n};\n\n// This allows grunt to abort if the PhantomJS version isn't adequate.\nsendMessage('private', 'version', phantom.version);\n\n// Abort if the page doesn't send any messages for a while.\nsetInterval(function() {\n  if (new Date() - last > options.timeout) {\n    sendMessage('fail.timeout');\n    phantom.exit();\n  }\n}, 100);\n\n// Create a new page.\nvar page = require('webpage').create();\n\n// Inject bridge script into client page.\nvar injected;\nvar inject = function() {\n  if (injected) { return; }\n  // Inject client-side helper script.\n  sendMessage('inject', options.inject);\n  page.injectJs(options.inject);\n  injected = true;\n};\n\n// Merge phantomjs page settings from options.page\nif (options.page) {\n  _.merge(page, options.page);\n}\n\n// Keep track if the client-side helper script already has been injected.\npage.onUrlChanged = function(newUrl) {\n  injected = false;\n  sendMessage('onUrlChanged', newUrl);\n};\n\npage.onCallback = function(msg) {\n  // The only thing that should ever use \"inject\" is the custom event\n  // handler this script adds to be executed on DOMContentLoaded.\n  if (msg.cmd === 'inject') {\n    inject();\n    return;\n  }\n  // Otherwise, relay it to grunt.\n  sendMessage(msg.cmd, msg.data);\n};\n\n// Relay console logging messages.\npage.onConsoleMessage = function(message) {\n  sendMessage('console', message);\n};\n\n// For debugging.\npage.onResourceRequested = function(request) {\n  sendMessage('onResourceRequested', request.url);\n};\n\npage.onResourceReceived = function(request) {\n  if (request.stage === 'end') {\n    sendMessage('onResourceReceived', request.url);\n  }\n};\n\npage.onError = function(msg, trace) {\n  sendMessage('error.onError', msg, trace);\n};\n\npage.onResourceError = function(resourceError) {\n  sendMessage('onResourceError', resourceError.url, resourceError.errorString);\n};\n\npage.onResourceTimeout = function(request) {\n  sendMessage('onResourceTimeout', request.url, request.errorString);\n};\n\n// Run before the page is loaded.\npage.onInitialized = function() {\n  sendMessage('onInitialized');\n\n  // Customization for mocha, passing mocha options from task config\n  page.evaluate(function(options) {\n    window.PHANTOMJS = options;\n  }, options);\n\n  // Abort if there is no bridge to inject.\n  if (!options.inject) { return; }\n  // Tell the client that when DOMContentLoaded fires, it needs to tell this\n  // script to inject the bridge. This should ensure that the bridge gets\n  // injected before any other DOMContentLoaded or window.load event handler.\n  page.evaluate(function() {\n    /*jshint browser:true, devel:true */\n    document.addEventListener('DOMContentLoaded', function () {\n      window.callPhantom({ cmd: 'inject' });\n    }, false);\n  });\n};\n\n// Run when the page has finished loading.\npage.onLoadFinished = function(status) {\n  // The window has loaded.\n  sendMessage('onLoadFinished', status);\n  if (status !== 'success') {\n    // File loading failure.\n    sendMessage('fail.load', url);\n    phantom.exit();\n  }\n};\n\n// Actually load url.\npage.open(url);\n","/home/travis/build/npmtest/node-npmtest-grunt-mocha/node_modules/grunt-mocha/support/mocha-helpers.js":"/**\n * Some helper functions when working with mocha\n */\n\n'use strict';\n\nvar exports = module.exports;\n\n/**\n * Take a collection of stats objects and reduce them\n *\n * @param stats {Array} Array of mocha test stats\n */\n\nexports.reduceStats = function(stats) {\n  var initial = {\n    passes    : 0,\n    failures  : 0,\n    tests     : 0,\n    duration  : 0\n  };\n\n  // console.log(testStats);\n  var total = stats.reduce(function(prev, stats, i, list) {\n    prev.passes    += stats.passes;\n    prev.failures  += stats.failures;\n    prev.tests     += stats.tests;\n    prev.duration  += (stats.end - stats.start);\n    return prev;\n  }, initial);\n\n  total.duration = this.formatMs(total.duration);\n\n  return total;\n};\n\nexports.formatMs = function(ms) {\n  return (Math.ceil(ms * 100) / 100000).toFixed(2);\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-mocha/node_modules/grunt-mocha/tasks/mocha.js":"/*\n * grunt\n * https://github.com/cowboy/grunt\n *\n * Copyright (c) 2012 \"Cowboy\" Ben Alman\n * Licensed under the MIT license.\n * http://benalman.com/about/license/\n *\n * Mocha task\n * Copyright (c) 2012 Kelly Miyashiro\n * Licensed under the MIT license.\n * http://benalman.com/about/license/\n */\n\n'use strict';\n\n// Nodejs libs.\nvar _             = require('lodash');\nvar util          = require('util');\nvar path          = require('path');\nvar EventEmitter  = require('events').EventEmitter;\nvar reporters     = require('mocha').reporters;\n// Helpers\nvar helpers       = require('../support/mocha-helpers');\n\nmodule.exports = function(grunt) {\n  // External lib.\n  var phantomjs = require('grunt-lib-phantomjs').init(grunt);\n\n  var reporter;\n\n  // Growl is optional\n  var growl;\n  try {\n    growl = require('growl');\n  } catch(e) {\n    growl = function(){};\n    grunt.verbose.write('Growl not found, \\'npm install growl\\' for Growl support');\n  }\n\n  // Get an asset file, local to the root of the project.\n  var asset = path.join.bind(null, __dirname, '..');\n\n  // Manage runners listening to phantomjs\n  var phantomjsEventManager = (function() {\n    var listeners = {};\n    var suites = [];\n\n    // Hook on Phantomjs Mocha reporter events.\n    phantomjs.on('mocha.*', function(test) {\n      var name, fullTitle, slow, err;\n      var evt = this.event.replace('mocha.', '');\n\n      if (evt === 'end') {\n        phantomjs.halt();\n      }\n\n      // Expand test values (and façace the Mocha test object)\n      if (test) {\n        fullTitle = test.fullTitle;\n        test.fullTitle = function() {\n          return fullTitle;\n        };\n\n        slow = this.slow;\n        test.slow = function() {\n          return slow;\n        };\n\n        test.parent = suites[suites.length - 1] || null;\n        test.isPending = function () { return test.pending; };\n\n        err = test.err;\n      }\n\n      if (evt === 'suite') {\n          suites.push(test);\n      } else if (evt === 'suite end') {\n          suites.pop(test);\n      }\n\n      // Trigger events for each runner listening\n      for (name in listeners) {\n        listeners[name].emit.call(listeners[name], evt, test, err);\n      }\n    });\n\n    return {\n      add: function(name, runner) {\n        listeners[name] = runner;\n      },\n      remove: function(name) {\n        delete listeners[name];\n      }\n    };\n  }());\n\n  // Built-in error handlers.\n  phantomjs.on('fail.load', function(url) {\n    phantomjs.halt();\n    grunt.verbose.write('Running PhantomJS...').or.write('...');\n    grunt.log.error();\n    grunt.warn('PhantomJS unable to load \"' + url + '\" URI.', 90);\n  });\n\n  phantomjs.on('fail.timeout', function() {\n    phantomjs.halt();\n    grunt.log.writeln();\n    grunt.warn('PhantomJS timed out, possibly due to a missing Mocha run() call.', 90);\n  });\n\n  // Debugging messages.\n  phantomjs.on('debug', grunt.log.debug.bind(grunt.log, 'phantomjs'));\n\n  // ==========================================================================\n  // TASKS\n  // ==========================================================================\n\n  grunt.registerMultiTask('mocha', 'Run Mocha unit tests in a headless PhantomJS instance.', function() {\n\n    var dest = this.data.dest;\n    // Merge task-specific and/or target-specific options with these defaults.\n    var options = this.options({\n      // Output console.log calls\n      log: false,\n      // Mocha reporter\n      reporter: 'Dot',\n      // Default PhantomJS timeout.\n      timeout: 5000,\n      // Mocha-PhantomJS bridge file to be injected.\n      inject: asset('phantomjs/bridge.js'),\n      // Main PhantomJS script file\n      phantomScript: asset('phantomjs/main.js'),\n      // Explicit non-file URLs to test.\n      urls: [],\n      // Fail with grunt.warn on first test failure\n      bail: false,\n      // Log script errors as grunt errors\n      logErrors: false,\n      // Growl notification when tests pass.\n      growlOnSuccess: true,\n      // Run tests, set to false if you would rather call `mocha.run` yourself\n      // due to async loading of your assets.\n      run: true,\n      reporterOptions: { output: dest },\n    });\n\n    // Output console messages if log == true\n    if (options.log) {\n      phantomjs.removeAllListeners(['console']);\n      phantomjs.on('console', grunt.log.writeln);\n    } else {\n      phantomjs.off('console', grunt.log.writeln);\n    }\n\n    // Output errors on script errors\n    if (options.logErrors) {\n      phantomjs.on('error.*', function(error, stack) {\n        var formattedStack = _.map(stack, function(frame) {\n          return \"    at \" + (frame.function ? frame.function : \"undefined\") + \" (\" + frame.file + \":\" + frame.line + \")\";\n        }).join(\"\\n\");\n        grunt.fail.warn(error + \"\\n\" + formattedStack, 3);\n      });\n    }\n\n    var optsStr = JSON.stringify(options, null, '  ');\n    grunt.verbose.writeln('Options: ' + optsStr);\n\n    // Clean Phantomjs options to prevent any conflicts\n    var PhantomjsOptions = _.omit(options, 'reporter', 'urls', 'log', 'bail');\n\n    var phantomOptsStr = JSON.stringify(PhantomjsOptions, null, '  ');\n    grunt.verbose.writeln('Phantom options: ' + phantomOptsStr);\n\n    // Combine any specified URLs with src files.\n    var urls = options.urls.concat(_.compact(this.filesSrc));\n\n    // Remember all stats from all tests\n    var testStats = [];\n\n    // This task is asynchronous.\n    var done = this.async();\n\n    // Hijack console.log to capture reporter output\n    var output = [];\n    var consoleLog = console.log;\n\n    // Only hijack if we really need to\n    // Some \"good\" reporters like XUnit accept an `output` option\n    // and we pass `dest` there but there's no good way to detect\n    // if a reporter supports this so stub out console.log just in case.\n    if (dest) {\n      if (grunt.file.isFile(dest)) {\n        grunt.file.delete(dest);\n      }\n      console.log = function() {\n        consoleLog.apply(console, arguments);\n        output.push(util.format.apply(util, arguments));\n      };\n    }\n\n    // Process each filepath in-order.\n    grunt.util.async.forEachSeries(urls, function(url, next) {\n      grunt.log.writeln('Testing: ' + url);\n\n      // create a new mocha runner façade\n      var runner = new EventEmitter();\n      phantomjsEventManager.add(url, runner);\n\n      // Clear runner event listener when test is over\n      runner.on('end', function() {\n        phantomjsEventManager.remove(url);\n      });\n\n      // Set Mocha reporter\n      var Reporter = null;\n      if (reporters[options.reporter]) {\n        Reporter = reporters[options.reporter];\n      } else {\n        // Resolve external reporter module\n        var externalReporter;\n        try {\n          externalReporter = require.resolve(options.reporter);\n        } catch (e) {\n          // Resolve to local path\n          externalReporter = path.resolve(options.reporter);\n        }\n\n        if (externalReporter) {\n          try {\n            Reporter = require(externalReporter);\n          }\n          catch (e) { }\n        }\n      }\n      if (Reporter === null) {\n        grunt.fatal('Specified reporter is unknown or unresolvable: ' + options.reporter);\n      }\n      reporter = new Reporter(runner, options);\n\n      // Launch PhantomJS.\n      phantomjs.spawn(url, {\n        // Exit code to use if PhantomJS fails in an uncatchable way.\n        failCode: 90,\n        // Additional PhantomJS options.\n        options: PhantomjsOptions,\n        // Do stuff when done.\n        done: function(err) {\n          var stats = runner.stats;\n          testStats.push(stats);\n\n          if (err) {\n            // Show Growl notice\n            // @TODO: Get an example of this\n            // growl('PhantomJS Error!');\n\n            // If there was a PhantomJS error, abort the series.\n            grunt.fatal(err);\n            done(false);\n          } else {\n            // If failures, show growl notice\n            if (stats.failures > 0) {\n              var reduced = helpers.reduceStats([stats]);\n              var failMsg = reduced.failures + '/' + reduced.tests +\n                ' tests failed (' + reduced.duration + 's)';\n\n              // Show Growl notice, if avail\n              growl(failMsg, {\n                image: asset('growl/error.png'),\n                title: 'Failure in ' + grunt.task.current.target,\n                priority: 3\n              });\n\n              // Bail tests if bail option is true\n              if (options.bail) grunt.warn(failMsg);\n            }\n\n            // Process next file/url\n            next();\n          }\n        }\n      });\n    },\n\n    // All tests have been run.\n    function() {\n      if (dest) {\n        // Restore console.log to original and write the output\n        console.log = consoleLog;\n\n        if (!grunt.file.exists(dest)) {\n            // Write only if our reporter ignored our `output` option\n            grunt.file.write(dest, output.join('\\n'));\n        }\n      }\n      var stats = helpers.reduceStats(testStats);\n\n      if (stats.failures === 0) {\n        var okMsg = stats.tests + ' passed!' + ' (' + stats.duration + 's)';\n\n        if (options.growlOnSuccess) {\n          growl(okMsg, {\n            image: asset('growl/ok.png'),\n            title: okMsg,\n            priority: 3\n          });\n        }\n\n        grunt.log.ok(okMsg);\n\n        // Async test pass\n        done(true);\n\n      } else {\n        var failMsg = stats.failures + '/' + stats.tests + ' tests failed (' +\n          stats.duration + 's)';\n\n        // Show Growl notice, if avail\n        growl(failMsg, {\n          image: asset('growl/error.png'),\n          title: failMsg,\n          priority: 3\n        });\n\n        // Bail tests if bail option is true\n        if (options.bail) {\n          grunt.warn(failMsg);\n        } else {\n          grunt.log.error(failMsg);\n        }\n\n        // Async test fail\n        done(false);\n      }\n    });\n  });\n};\n"}